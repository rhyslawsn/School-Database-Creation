drop table if exists enrollments;
drop table if exists students;
drop table if exists prereqs;
drop table if exists course_offerings;
drop table if exists courses;

drop function if exists course_offering_size_trigger();
drop function if exists course_offering_prereqs_trigger();
drop function if exists courses_ignore_duplicates();
drop function if exists students_ignore_duplicates();
drop function if exists prereqs_ignore_null();
drop function if exists comp_prereqs(varchar(10),int,varchar(9));

create table students(
	student_id varchar(9) primary key,
	name varchar(255) not null,

	unique(student_id, name),

	check(length(student_id) > 0),
	check(length(name) > 0));

create table courses(
       course_code varchar(10) primary key);

create table course_offerings(
        course_code varchar(10),
	course_name varchar(128),
	term_code int,
	max_cap int not null,
	instructor_name	varchar(255) not null,

	unique(course_code,term_code),

	primary key(course_code, term_code),
	foreign key(course_code) references courses(course_code)
		on delete restrict
		on update cascade,

	check(length(course_name) > 0),
	check(max_cap >= 0),
	check(length(instructor_name) > 0));

create table prereqs(
        course_code varchar(10),
        term_code int,
        prereq varchar(10),       

        primary key(course_code,term_code,prereq),
        foreign key(course_code,term_code) references course_offerings(course_code,term_code)
       	        on delete restrict
	        on update cascade,	       

	check(length(course_code) > 0),
	check(length(prereq) > 0));

create table enrollments(
        student_id varchar(9) not null,
        course_code varchar(10) not null,
        term_code int not null,
        final_grade int null,

        unique(student_id,course_code,term_code,final_grade),

        primary key(student_id,course_code,term_code),
        foreign key(student_id) references students(student_id)
       	        on delete restrict
	        on update cascade,
	foreign key(course_code,term_code) references course_offerings(course_code,term_code)
	        on delete restrict
	        on update cascade,

       check(length(student_id) > 0),
       check(final_grade >= 0 and final_grade <= 100));

create function course_offering_size_trigger()
returns trigger as
$BODY$
begin
if (select count(*) from enrollments
   where course_code = new.course_code and term_code = new.term_code) > (select max_cap from course_offerings where course_code = new.course_code and term_code = new.term_code)
then 
     raise exception 'Course is full.';
end if;
return new;
end
$BODY$
language plpgsql;

create trigger course_offering_size_constraint
       after insert or update on enrollments 
       for each row 
       execute procedure course_offering_size_trigger();

create function course_offering_prereqs_trigger()
returns trigger as
$BODY$
begin
if (select exists(select prereq from prereqs where course_code = new.course_code and term_code = new.term_code))
then 
     if not(comp_prereqs(new.course_code,new.term_code,new.student_id))
     then
	raise exception 'Prereqs have not been met.';
     end if;
end if;
return new;
end
$BODY$
language plpgsql;

create trigger course_offering_prereqs_constraint
       after insert or update on enrollments 
       for each row 
       execute procedure course_offering_prereqs_trigger();

create function comp_prereqs(course_c varchar(10), term_c int, student_i varchar(9))
	returns boolean as
	$BODY$
	declare passing boolean; prereq_num int; num_course_taken int;
	begin
	create table prereq_needed as (select prereq from prereqs
			where course_code = course_c
			and term_code = term_c);
	create table prereq_deets as (select course_code, term_code, grade from enrollments natural join prereq_needed
			where course_code = prereq and student_id = student_i);
	select count(*) from prereq_needed into prereq_num;
	select count(*) from prereq_deets into num_course_taken;
	
	if (prerq_num > num_course_taken) then
		drop table if exists prereq_needed;
		drop table if exists prereq_deets;
		return false;
	end if;
	select exists(select final_grade from prereq_deets where final_grade > 50)
		and not
		exists (select final_grade from prereq_deets where final_grade < 50) into passing;
	drop table if exists prereq_needed;
	drop table if exists prereq_deets;
	return passing;
	end
	$BODY$
	language plpgsql;

create function check_final_grades(compl_course varchar(10), compl_term int, compl_student varchar(9), grade int)
	returns boolean as
	$BODY$
	declare passing boolean;
	begin
		/*return(with prereq_course_taken as (select prereq from prereqs where course_code = compl_course and term_code = compl_term),
			prereq_deets as (select course_code, term_code, grade from enrollments natural join prereq_course_taken));*/
	end
	$BODY$
	language plpgsql;	

create function students_ignore_duplicates()
returns trigger as
$BODY$
begin
if (select count(*) 
   from students 
   where student_id = new.student_id) > 0
then 
     return NULL;
end if;
return new;
end
$BODY$
language plpgsql;

create trigger students_ignore_duplicates_trigger
       before insert on students 
       for each row 
       execute procedure students_ignore_duplicates();

create function courses_ignore_duplicates()
returns trigger as
$BODY$
begin
if (select count(*) 
   from courses 
   where course_code = new.course_code) > 0
then 
     return NULL;
end if;
return new;
end
$BODY$
language plpgsql;

create trigger courses_ignore_duplicates_trigger
       before insert on courses 
       for each row 
       execute procedure courses_ignore_duplicates();

create function prereqs_ignore_null()
returns trigger as
$BODY$
begin
if (select prereq
   from prereqs
   where prereq = new.prereq) = NULL
then
     return NULL;
end if;
return new;
end
$BODY$
language plpgsql;

create trigger prereqs_ignore_null_trigger
       before insert on prereqs
       for each row
       execute procedure prereqs_ignore_null();
/*
insert into students values('V00818835','Rhys Lawson');
insert into students values('V00818834','Rhys Lawson');
insert into students values('V00818836','Kevin Virtue');

insert into courses values('CSC 110');
insert into courses values('SENG 265');
insert into courses values('RHYS 420');
insert into courses values('');

insert into course_offerings values('CSC 110','This is a course',201701,400,'B Bird');
insert into course_offerings values('CSC 110','Fundamental Programming: I',201609,2,'B Bird');
insert into course_offerings values('SENG 265','Software Developement',201703,300,'Rhys');
insert into course_offerings values('SENG 265','Software Developement',201701,300,'Rhys');

insert into prereqs values('CSC 110',201701,'SENG 265');

insert into enrollments values('V00818835','SENG 265',201703,49);
insert into enrollments values('V00818835','CSC 110',201701,89);
insert into enrollments values('V00818835','CSC 110',201609,23);
insert into enrollments values('V00818834','CSC 110',201609,69);
insert into enrollments values('V00818836','CSC 110',201609,33);
*/
